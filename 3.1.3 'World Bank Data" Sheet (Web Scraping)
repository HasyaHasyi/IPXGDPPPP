let
    // Step 1: Fetch HTML content from the World Bank Carbon Pricing Dashboard
    Source = Web.BrowserContents("https://carbonpricingdashboard.worldbank.org/compliance/instrument-detail"),

    // Step 2: Extract data from the compliance details table by selecting the appropriate rows
    #"Extracted Table From Html" = Html.Table(Source, {
        {"Column1", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(1)"},
        {"Column2", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(2)"},
        {"Column3", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(3)"},
        {"Column4", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(4)"},
        {"Column5", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(5)"},
        {"Column6", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(6)"},
        {"Column7", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(7)"},
        {"Column8", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(8)"},
        {"Column9", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(9)"},
        {"Column10", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(10)"},
        {"Column11", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(11)"},
        {"Column12", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(12)"},
        {"Column13", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(13)"},
        {"Column14", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(14)"},
        {"Column15", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(15)"},
        {"Column16", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(16)"},
        {"Column17", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(17)"},
        {"Column18", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(18)"},
        {"Column19", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(19)"},
        {"Column20", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(20)"},
        {"Column21", "TABLE[id='compliance_detail_table'] > * > TR > :nth-child(21)"}
    }, [RowSelector="TABLE[id='compliance_detail_table'] > * > TR"]),

    // Step 3: Transform the extracted table by changing data types for each column
    #"Changed Type" = Table.TransformColumnTypes(#"Extracted Table From Html",{
        {"Column1", type text}, {"Column2", type text}, {"Column3", type text}, {"Column4", type text},
        {"Column5", type text}, {"Column6", type text}, {"Column7", type text}, {"Column8", type text},
        {"Column9", type text}, {"Column10", type text}, {"Column11", type text}, {"Column12", type text},
        {"Column13", type text}, {"Column14", type text}, {"Column15", type text}, {"Column16", type text},
        {"Column17", type text}, {"Column18", type text}, {"Column19", type text}, {"Column20", type text},
        {"Column21", type text}
    }),

    // Step 4: Skip the first two rows (headers) from the table
    #"Removed Top Rows" = Table.Skip(#"Changed Type", 2),

    // Step 5: Rename columns to match the data
    #"Renamed Columns" = Table.RenameColumns(#"Removed Top Rows",{
        {"Column1", "Unique ID"}, {"Column2", "Instrument Name"}, {"Column3", "Type of Instrument"},
        {"Column4", "Status"}, {"Column5", "Year"}
    }),

    // Step 6: Filter rows where "Status" is equal to "Implemented" to focus on active instruments
    #"Filtered Rows" = Table.SelectRows(#"Renamed Columns", each ([Status] = "Implemented")),

    // Step 7: Remove unnecessary columns that are not relevant for analysis
    #"Removed Columns" = Table.RemoveColumns(#"Filtered Rows",{"Column6"}),

    // Step 8: Filter rows where the "Scope" is "National" to focus on national-level instruments
    #"Filtered Rows1" = Table.SelectRows(#"Removed Columns", each ([Column7] = "National")),

    // Step 9: Rename columns to more meaningful names
    #"Renamed Columns1" = Table.RenameColumns(#"Filtered Rows1",{
        {"Column7", "Scope"}, {"Column8", "Jurisdiction"}, {"Column9", "Region"},
        {"Column10", "Level of Income"}, {"Column11", "Price"}
    }),

    // Step 10: Remove additional unnecessary columns
    #"Removed Columns1" = Table.RemoveColumns(#"Renamed Columns1",{"Column12", "Column13"}),

    // Step 11: Split the "Price" column by the "$" delimiter and process it for cleaner data
    #"Split Column by Delimiter" = Table.SplitColumn(#"Removed Columns1", "Price", Splitter.SplitTextByDelimiter("$", QuoteStyle.None), {"Price.1", "Price.2", "Price.3"}),

    // Step 12: Convert the appropriate price columns to numeric types
    #"Changed Type1" = Table.TransformColumnTypes(#"Split Column by Delimiter",{{"Price.1", type text}, {"Price.2", type text}, {"Price.3", type text}}),

    // Step 13: Remove unneeded columns related to price details
    #"Removed Columns3" = Table.RemoveColumns(#"Changed Type1",{"Price.1", "Price.3"}),

    // Step 14: Further split the "Price.2" column by spaces for detailed price data
    #"Split Column by Delimiter1" = Table.SplitColumn(#"Removed Columns3", "Price.2", Splitter.SplitTextByEachDelimiter({" "}, QuoteStyle.Csv, false), {"Price.2.1", "Price.2.2"}),

    // Step 15: Convert the "Price.2.1" column to a numeric type
    #"Changed Type2" = Table.TransformColumnTypes(#"Split Column by Delimiter1",{{"Price.2.1", Int64.Type}, {"Price.2.2", type text}}),

    // Step 16: Remove the unnecessary "Price.2.2" column
    #"Removed Columns4" = Table.RemoveColumns(#"Changed Type2",{"Price.2.2"}),

    // Step 17: Rename the "Price.2.1" column to simply "Price"
    #"Renamed Columns3" = Table.RenameColumns(#"Removed Columns4",{{"Price.2.1", "Price"}}),

    // Step 18: Duplicate the "Unique ID" column to create a separate copy for splitting
    #"Duplicated Column" = Table.DuplicateColumn(#"Renamed Columns3", "Unique ID", "Unique ID - Copy"),

    // Step 19: Reorder columns to ensure the correct order
    #"Reordered Columns" = Table.ReorderColumns(#"Duplicated Column",{"Unique ID", "Unique ID - Copy", "Instrument Name", "Type of Instrument", "Status", "Year", "Scope", "Jurisdiction", "Region", "Level of Income", "Price", "Covered Gas"}),

    // Step 20: Split the "Unique ID - Copy" column to extract meaningful information
    #"Split Column by Delimiter2" = Table.SplitColumn(#"Reordered Columns", "Unique ID - Copy", Splitter.SplitTextByEachDelimiter({"_"}, QuoteStyle.None, false), {"Unique ID - Copy.1", "Unique ID - Copy.2"}),

    // Step 21: Convert the split "Unique ID - Copy" columns to text type
    #"Changed Type3" = Table.TransformColumnTypes(#"Split Column by Delimiter2",{{"Unique ID - Copy.1", type text}, {"Unique ID - Copy.2", type text}}),

    // Step 22: Remove the unnecessary "Unique ID - Copy.1" column
    #"Removed Columns5" = Table.RemoveColumns(#"Changed Type3",{"Unique ID - Copy.1"}),

    // Step 23: Split the "Unique ID - Copy.2" column into separate columns based on "_" delimiter
    #"Split Column by Delimiter3" = Table.SplitColumn(#"Removed Columns5", "Unique ID - Copy.2", Splitter.SplitTextByEachDelimiter({"_"}, QuoteStyle.None, false), {"Unique ID - Copy.2.1", "Unique ID - Copy.2.2"}),

    // Step 24: Convert the split columns into text types
    #"Changed Type4" = Table.TransformColumnTypes(#"Split Column by Delimiter3",{{"Unique ID - Copy.2.1", type text}, {"Unique ID - Copy.2.2", type text}}),

    // Step 25: Merge the split "Unique ID" columns into one
    #"Merged Columns" = Table.CombineColumns(#"Changed Type4",{"Unique ID - Copy.2.1", "Unique ID - Copy.2.2"},Combiner.CombineTextByDelimiter(" ", QuoteStyle.None),"Iso Code")
in
    #"Merged Columns"
